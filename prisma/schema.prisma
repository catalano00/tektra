generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Project {
  currentStatus                String
  projectId                    String      @id
  clientId                     String
  streetaddress                String
  city                         String
  state                        String
  zipcode                      Int
  contractAmount               Decimal     @db.Decimal(15, 2)
  contingency                  Decimal     @db.Decimal(15, 2)
  totalContract                Decimal     @db.Decimal(15, 2)
  buildableSqFt                Int?
  estimatedPanelSqFt           Int?
  expectedDrawingStart         DateTime?
  expectedProductionStart      DateTime?
  expectedProductionCompletion DateTime?
  notes                        String?
  updatedAt                    DateTime?   @default(now()) @updatedAt
  components                   Component[]

  Client         Client   @relation(fields: [clientId], references: [id])
  componentSchedules          ComponentSchedule[]
  weekCapacities              ProjectWeekCapacity[]

  @@map("projects")
}

model TimeEntry {
  id            String    @id @default(uuid())
  componentId   String
  componentCode String?
  component     Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  process       String
  status        String
  duration      Int
  teamLead      String?
  workstation   String?
  warehouse     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@unique([componentId, process])
}

model Component {
  id                   String    @id @default(uuid())
  componentId          String
  projectId            String
  componentType        String
  currentStatus        String
  percentComplete      Int
  processStatus        String?
  lastCompletedProcess String?
  nextProcess          String?
  designUrl            String?
  componentsqft        Float?
  teamLead             String?
  workstation          String?
  completedAt          DateTime?
  datedelivered        DateTime?
  dateshipped          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  maxWidth             String?
  maxHeight            String?
  Level                String?
  weight               Float?
  sequence             String?

  timeEntries      TimeEntry[]
  qualityIssues    QualityIssue[] // âœ… back-reference
  Project          Project        @relation(fields: [projectId], references: [projectId])
  part             Part[]
  sheathing        Sheathing?
  connectors       Connectors?
  framingTL        FramingTL?
  schedule         ComponentSchedule?

  @@unique([projectId, componentId])
}

model Part {
  id          String    @id @default(cuid())
  componentId String
  size        String
  label       String
  count       Int
  cutLength   String
  component   Component @relation(fields: [componentId], references: [id])
}

model Sheathing {
  id            String    @id @default(cuid())
  componentId   String    @unique
  componentCode String
  panelArea     String
  count         Float
  description   String?
  component     Component @relation(fields: [componentId], references: [id])
}

model Connectors {
  id            String    @id @default(cuid())
  componentCode String
  componentId   String    @unique
  label         String
  count         Int
  description   String?
  component     Component @relation(fields: [componentId], references: [id])
}

model FramingTL {
  id            String    @id @default(cuid())
  componentCode String
  componentId   String    @unique
  ftype         String
  totalLength   String
  count         Int
  component     Component @relation(fields: [componentId], references: [id])
}

enum Process {
  Cut
  Assemble
  Fly
  Ship
}

enum Status {
  pending
  complete
  paused
}

model QualityIssue {
  id                String   @id @default(uuid())
  componentId       String
  process           String
  issueCode         String
  engineeringAction String?
  notes             String?
  training          String?
  createdAt         DateTime @default(now())

  component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
}

model StagingData {
  id          String   @id @default(uuid()) // Unique identifier for each entry
  rawData     Json     // Store the raw JSON payload
  status      String   @default("pending") // Status: pending, processed, failed
  createdAt   DateTime @default(now()) // Timestamp for when the data was received
  updatedAt   DateTime @updatedAt // Automatically updated timestamp
}

model Client {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  address   String
  city      String
  state     String
  zip       String
  projects  Project[]
  leads     Lead[]
}

model Lead {
  id          String   @id @default(uuid())
  clientId    String
  firstName   String
  lastName    String
  email       String?
  phone       String?
  status      String?      // e.g. "new", "contacted", "qualified", etc.
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Client      Client   @relation(fields: [clientId], references: [id])
}

model ComponentSchedule {
  id          String    @id @default(cuid())
  componentId String    @unique
  projectId   String
  weekKey     String    // ISO week key YYYY-Www
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  Project     Project   @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@index([weekKey])
  @@index([projectId, weekKey])
}

model ProjectWeekCapacity {
  id           String    @id @default(cuid())
  projectId    String?
  weekKey      String
  capacitySqFt Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  Project      Project?  @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@unique([projectId, weekKey])
  @@index([weekKey])
}